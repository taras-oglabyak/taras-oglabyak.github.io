{"version":3,"sources":["containers/Auth/Auth.js","store/actions/authorize.js","store/actions/actionTypes.js","containers/Test/Test.js","containers/Secured/Secured.js","http.js","containers/GetTime/GetTime.js","components/UI/NotFound/NotFound.js","App.js","serviceWorker.js","store/reducers/auth.js","index.js"],"names":["Auth","state","userdata","username","value","elementType","elementConfig","type","password","onUserDataChange","formElementId","event","newUserData","Object","objectSpread","_this","newModifiedElement","target","setState","formSubmitHandler","preventDefault","console","log","_this2","this","formData","key","push","id","config","authBody","props","loading","react_default","a","createElement","onSubmit","TextField_default","name","label","onChange","margin","Button_default","color","variant","onClick","login","token","user","style","readOnly","rows","cols","JSON","stringify","className","width","error","Component","connect","auth","dispatch","axios","method","url","data","headers","Content-Type","then","response","localStorage","authToken","access_token","authData","authorizeSuccess","jwtDecode","catch","status","authorize","Test","Paper_default","index_es","title","map","_ref","primary","handleDelete","padding","placeholder","onSearchInputChange","Secured","keycloak","authenticated","Keycloak","init","onLoad","fetchClient","instance","create","interceptors","request","use","getItem","Authorization","concat","GetTime","time","axiosSecured","get","notFound","App","Link","to","Switch","Route","path","component","exact","render","NotFound","Boolean","window","location","hostname","match","initialState","authReducer","arguments","length","undefined","action","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","app","es","BrowserRouter","src_App_0","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c86b2546.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport {authorize} from './../../store/actions/authorize';\n\nimport './Auth.css';\n\nclass Auth extends Component {\n    state = {\n        userdata: {\n            username: {\n                value: 'tenant1',\n                elementType: 'input',\n                elementConfig: {\n                    type: 'input'\n                }\n            },\n            password: {\n                value: 'tenant1',\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password'\n                }\n            }\n        }\n    };\n\n    onUserDataChange = (formElementId, event) => {\n        const newUserData = {...this.state.userdata};\n\n        const newModifiedElement = {...newUserData[formElementId]};\n        newModifiedElement.value = event.target.value;\n        newUserData[formElementId] = newModifiedElement;\n\n        this.setState({userdata: newUserData});\n    };\n\n    formSubmitHandler = event => {\n        event.preventDefault();\n        console.log(this.state);\n    };\n\n    render() {\n        const formData = [];\n        for (let key in this.state.userdata) {\n            formData.push({\n                id: key,\n                config: this.state.userdata[key]\n            });\n        }\n\n        let authBody = null;\n        if (this.props.loading) {\n            authBody = <h1>Loading...</h1>\n        } else {\n            authBody = <form onSubmit={this.formSubmitHandler}>\n                <div>\n                    <TextField\n                        name='username'\n                        label='username'\n                        value={this.state.userdata.username.value}\n                        onChange={event => this.onUserDataChange('username', event)}\n                        margin='normal'/>\n                </div>\n                <div>\n                    <TextField\n                        name='password'\n                        label='password'\n                        value={this.state.userdata.password.value}\n                        onChange={event => this.onUserDataChange('password', event)}\n                        margin='normal'/>\n                </div>\n\n                {/*{formData.map(formElement => {*/}\n                        {/*return <Input*/}\n                            {/*key={formElement.id}*/}\n                            {/*value={formElement.config.value}*/}\n                            {/*label={formElement.id}*/}\n                            {/*elementType={formElement.config.elementType}*/}\n                            {/*elementConfig={formElement.config.elementConfig}*/}\n                            {/*changed={event => this.onUserDataChange(formElement.id, event)}/>*/}\n                    {/*}*/}\n                {/*)}*/}\n                {/*<button*/}\n                    {/*onClick={() => this.props.login(this.state.userdata.username.value, this.state.userdata.password.value)}>login*/}\n                {/*</button>*/}\n                <Button color='primary' variant='contained'\n                        onClick={() => this.props.login(this.state.userdata.username.value, this.state.userdata.password.value)}>sdsd</Button>\n            </form>\n        }\n\n        let token = null;\n        if (this.props.user) {\n            token = <div><textarea style={{margin: \"25px 0\"}} readOnly rows=\"20\" cols=\"64\" value={JSON.stringify(this.props.user)}/></div>\n        }\n\n        return (\n            <div className=\"Auth\" style={{width: \"50%\", margin: \"10px\"}}>\n                {authBody}\n\n\n                {token}\n\n                <div >\n                    {this.props.error}\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\n\nconst mapState = state => {\n    return {\n        loading: state.auth.loading,\n        user: state.auth.user,\n        error: state.auth.error\n    }\n};\n\nconst mapDispatchers = dispatch => {\n    return {\n        login: (username, password) => dispatch(authorize(username, password))\n    }\n};\n\nexport default connect(mapState, mapDispatchers)(Auth);\n","import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\n\nconst authorizeStarted = () => {\n    return {\n        type: actionTypes.AUTHORIZE_STARTED\n    }\n};\n\nconst authorizeSuccess = response => {\n    return {\n        type: actionTypes.AUTHORIZE_SUCCESS,\n        authData: response,\n    }\n};\n\nconst authorizeFailed = response => {\n    return {\n        type: actionTypes.AUTHORIZE_FAILED,\n        error: response\n    }\n};\n\nexport const authorize = (username, password) => {\n    return dispatch => {\n        dispatch(authorizeStarted());\n        axios({\n            method: 'post',\n            url: '/auth/token',\n            data: {\n                username: username,\n                password: password\n            },\n            config: {headers: {'Content-Type': 'application/json'}}\n        })\n            .then(response => {\n                localStorage.authToken = response.data.access_token;\n                dispatch(authorizeSuccess(jwtDecode(response.data.access_token)));\n            })\n            .catch(error => {\n                dispatch(authorizeFailed(error.response.status));\n            });\n    }\n};\n","export const AUTHORIZE_STARTED = 'AUTHORIZE_STARTED';\nexport const AUTHORIZE_SUCCESS = 'AUTHORIZE_SUCCESS';\nexport const AUTHORIZE_FAILED = 'AUTHORIZE_FAILED';\n","import React, {Component} from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper'\nimport {List, ListItem, ListItemText, ListItemSecondaryAction, IconButton} from '@material-ui/core'\n\nclass Test extends Component {\n\n    render() {\n        const exercises = [{id: 1, title: \"11111\"}, {id: 1, title: \"11111\"}, {id: 1, title: \"11111\"}, {\n            id: 1,\n            title: \"11111\"\n        }];\n\n\n        return (\n            <div>\n\n                {/*<Typography variant='headline' align='center' gutterBottom>*/}\n                {/*Exercises*/}\n                {/*</Typography>*/}\n\n                <Paper>\n                    Exercises\n                </Paper>\n\n\n                <Paper>\n                    asfdsf\n                    <List>\n                        {exercises.map(({id, title}) =>\n                            <ListItem key={id}>\n                                <ListItemText primary={title}/>\n                                <ListItemSecondaryAction>\n                                    <IconButton\n                                        color='primary'\n                                        onClick={() => this.handleDelete(id)}\n                                    >\n                                        {/* ??? */}\n                                    </IconButton>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                        )}\n                    </List>\n                </Paper>\n\n\n                {/*<NavBar />*/}\n\n\n                <TextField style={{padding: 24}}\n                           id=\"searchInput\"\n                           placeholder=\"Search for Courses\"\n                           margin=\"normal\"\n\n                           onChange={this.onSearchInputChange}\n                />\n\n\n            </div>\n        );\n    }\n}\n\nexport default Test;\n","import React, {Component} from 'react';\nimport Keycloak from 'keycloak-js';\n\nclass Secured extends Component {\n\n\n    state = {keycloak: null, authenticated: false};\n\n\n    componentDidMount() {\n        const keycloak = Keycloak('/keycloak.json');\n        keycloak.init({onLoad: 'login-required'}).then(authenticated => {\n            this.setState({keycloak: keycloak, authenticated: authenticated})\n        })\n    }\n\n    render() {\n        if (this.state.keycloak) {\n            if (this.state.authenticated) return (\n                <div>\n                    <p>This is a Keycloak-secured component of your application. You shouldn't be able\n                        to see this unless you've authenticated with Keycloak.</p>\n                </div>\n            ); else return (<div>Unable to authenticate!</div>)\n        }\n        return (\n            <div>Initializing Keycloak...</div>\n        );\n    }\n}\n\nexport default Secured;\n","import axios from 'axios';\n\nconst fetchClient = () => {\n    const defaultOptions = {\n        method: 'get',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    };\n\n    const instance = axios.create(defaultOptions);\n\n    instance.interceptors.request.use(function (config) {\n        const token = localStorage.getItem('authToken');\n        config.headers.Authorization = token ? `Bearer ${token}` : '';\n        return config;\n    });\n\n    return instance;\n};\n\nexport default fetchClient();\n","import React, {Component} from 'react';\n\nimport axiosSecured from './../../http';\n\nclass GetTime extends Component {\n    state = {\n        time: null\n    };\n\n    componentDidMount() {\n        axiosSecured.get('/api/now')\n            .then(response => {\n                console.log('response', response.data);\n                this.setState({time: response.data});\n                console.log('end');\n            })\n            .catch(function (response) {\n                console.log((response));\n            });\n    }\n\n    render() {\n        if (this.state.time) {\n            return <h1>time: {this.state.time}</h1>\n        }\n        return <h2>no data</h2>\n    }\n}\n\nexport default GetTime;\n","import React from 'react';\n\nconst notFound = props => {\n    return (\n        <div>\n            <h1>Not found!</h1>\n        </div>\n    );\n}\n\nexport default notFound;\n","import React, {Component} from 'react';\nimport {Route, Switch, Link} from 'react-router-dom';\n\nimport Auth from './containers/Auth/Auth';\nimport Test from './containers/Test/Test';\nimport Secured from './containers/Secured/Secured';\nimport GetTime from './containers/GetTime/GetTime';\n\nimport NotFound from './components/UI/NotFound/NotFound';\n\nimport './App.css';\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header>\n                    <ul>\n                        <li><Link to='/'>Home</Link></li>\n                        <li><Link to='/auth'>Login</Link></li>\n                        {/*<li><Link to='/secured'>Secured</Link></li>*/}\n                        <li><Link to='/get-time'>Get Time</Link></li>\n                    </ul>\n                </header>\n\n\n                <div>\n                    <Switch>\n                        <Route path='/auth' component={Auth}/>\n                        <Route path='/get-time' component={GetTime}/>\n                        <Route path='/secured' component={Secured}/>\n                        <Route path='/test' component={Test}/>\n                        <Route path='/' exact render={() => <h1>Hello</h1>}/>\n                        <Route component={NotFound}/>\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import * as actionTypes from './../actions/actionTypes';\nimport jwtDecode from 'jwt-decode';\n\nconst initialState = (token => ({\n    user: token ? jwtDecode(token) : null,\n    loading: false,\n    error: null\n}))(localStorage.authToken);\n\n\nconst authReducer = (state = initialState, action) => {\n    if (action.type === actionTypes.AUTHORIZE_STARTED) {\n        return {\n            ...state,\n            loading: true\n        }\n    }\n\n    if (action.type === actionTypes.AUTHORIZE_SUCCESS) {\n        return {\n            ...state,\n            loading: false,\n            error: null,\n            user: action.authData\n        }\n    }\n\n    if (action.type === actionTypes.AUTHORIZE_FAILED) {\n        return {\n            ...state,\n            loading: false,\n            error: action.error\n        }\n    }\n\n    return state;\n};\n\nexport default authReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, combineReducers, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\n\nimport authReducer from './store/reducers/auth';\n\nconst rootReducer = combineReducers({\n    auth: authReducer\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}